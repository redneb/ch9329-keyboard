"""
Utilities for character code conversion
"""


def scancode_to_ascii(scancode):
    """
    Convert a keyboard scancode to its ASCII representation
    :param scancode:
    :return:
    """
    key = 0
    index = 2

    # If multiple keydowns come in before a key-up, they are buffered in the rollover buffer
    while index < 8:
        key = scancode[index]
        if key > 0:
            break
        index += 1

    # This function is customised to UK-ISO keyboard layout. ANSI scancodes have differences.
    hid_to_ascii_mapping = {
        0x04: 'a', 0x05: 'b', 0x06: 'c', 0x07: 'd', 0x08: 'e', 0x09: 'f', 0x0a: 'g', 0x0b: 'h',
        0x0c: 'i', 0x0d: 'j', 0x0e: 'k', 0x0f: 'l', 0x10: 'm', 0x11: 'n', 0x12: 'o', 0x13: 'p',
        0x14: 'q', 0x15: 'r', 0x16: 's', 0x17: 't', 0x18: 'u', 0x19: 'v', 0x1a: 'w', 0x1b: 'x',
        0x1c: 'y', 0x1d: 'z',
        0x1E: '1', 0x1F: '2', 0x20: '3', 0x21: '4', 0x22: '5', 0x23: '6', 0x24: '7', 0x25: '8',
        0x26: '9', 0x27: '0', 0x2D: '-', 0x2E: '=',
        0x28: '\n', 0x2C: ' ', 0x2B: '\t', 0x2a: '\b',
        0x2F: '[', 0x30: ']', 0x32: '#', 0x33: ';', 0x34: '\'', 0x35: '`',
        0x36: ',', 0x37: '.', 0x38: '/', 0x39: 'CAPSLOCK', 0x29: 'ESC',
        0x49: 'Ins', 0x4a: 'Home', 0x4b: 'PgUp', 0x4c: 'Del', 0x4d: 'End', 0x4e: 'PgDn',
        0x4f: '→', 0x50: '←', 0x51: '↓', 0x52: '↑',
        0x64: '\\'
    }

    # Overwrite dict values for shift-modified keys. Note: must deep-copy dict!
    modifier_ascii_mapping = hid_to_ascii_mapping.copy()
    modifier_ascii_mapping.update({
        0x04: 'A', 0x05: 'B', 0x06: 'C', 0x07: 'D', 0x08: 'E', 0x09: 'F', 0x0A: 'G', 0x0B: 'H',
        0x0C: 'I', 0x0D: 'J', 0x0E: 'K', 0x0F: 'L', 0x10: 'M', 0x11: 'N', 0x12: 'O', 0x13: 'P',
        0x14: 'Q', 0x15: 'R', 0x16: 'S', 0x17: 'T', 0x18: 'U', 0x19: 'V', 0x1A: 'W', 0x1B: 'X',
        0x1C: 'Y', 0x1D: 'Z',
        0x1E: '!', 0x1F: '"', 0x20: '#', 0x21: '$', 0x22: '%', 0x23: '^', 0x24: '&', 0x25: '*',
        0x26: '(', 0x27: ')', 0x2D: '_', 0x2E: '+',
        0x2F: '{', 0x30: '}', 0x32: '~', 0x33: ':', 0x34: '@', 0x35: '¬',
        0x36: '<', 0x37: '>', 0x38: '?',
        0x64: '|'
    })

    try:
        if scancode[0] & 0x22 or scancode[0] & 0x22:  # LShift 0x2 or RShift 0x20 held
            return modifier_ascii_mapping[key]
        return hid_to_ascii_mapping[key]
    except KeyError as e:
        return None


def ascii_to_scancode(ascii_char):
    ascii_to_hid_mapping = {
         # No modifier (L/RShift) held
         'a': 0x4,  'b': 0x5,  'c': 0x6,  'd': 0x7,  'e': 0x8,  'f': 0x9,  'g': 0xa,
         'h': 0xb,  'i': 0xc,  'j': 0xd,  'k': 0xe,  'l': 0xf,  'm': 0x10, 'n': 0x11,
         'o': 0x12, 'p': 0x13, 'q': 0x14, 'r': 0x15, 's': 0x16, 't': 0x17, 'u': 0x18,
         'v': 0x19, 'w': 0x1a, 'x': 0x1b, 'y': 0x1c, 'z': 0x1d, '1': 0x1e, '2': 0x1f,
         '3': 0x20, '4': 0x21, '5': 0x22, '6': 0x23, '7': 0x24, '8': 0x25, '9': 0x26,
         '0': 0x27, '-': 0x2d, '=': 0x2e, '[': 0x2f, ']': 0x30, '#': 0x32, ';': 0x33,
         "'": 0x34, '`': 0x35, ',': 0x36, '.': 0x37, '/': 0x38, '\\': 0x64,
         # With modifier (still same scancode for char)
         'A': 0x4,  'B': 0x5,  'C': 0x6,  'D': 0x7,  'E': 0x8,  'F': 0x9,  'G': 0xa,
         'H': 0xb,  'I': 0xc,  'J': 0xd,  'K': 0xe,  'L': 0xf,  'M': 0x10, 'N': 0x11,
         'O': 0x12, 'P': 0x13, 'Q': 0x14, 'R': 0x15, 'S': 0x16, 'T': 0x17, 'U': 0x18,
         'V': 0x19, 'W': 0x1a, 'X': 0x1b, 'Y': 0x1c, 'Z': 0x1d, '!': 0x1e, '"': 0x1f,
         '£': 0x20, '$': 0x21, '%': 0x22, '^': 0x23, '&': 0x24, '*': 0x25, '(': 0x26,
         ')': 0x27, '_': 0x2d, '+': 0x2e, '{': 0x2f, '}': 0x30, '~': 0x32, ':': 0x33,
         '@': 0x34, '¬': 0x35, '<': 0x36, '>': 0x37, '?': 0x38, '|': 0x64,
         # Paragraph control characters
         '\n': 0x28, '\t': 0x2b, '\b': 0x2a, ' ': 0x2c,
    }

    try:
        return ascii_to_hid_mapping[ascii_char]
    except KeyError as e:
        return None
